/**
 * –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
 * @version 1.0.1
 */

class QuizApp {
    constructor() {
        this.currentCategory = null;
        this.questions = [];
        this.currentQuestionIndex = 0;
        this.score = 0;
        this.correctAnswers = 0;
        this.questionHistory = [];
        this.selectedAnswers = {};
        this.confirmedAnswers = new Set();
        this.portalUrl = '/';

        this.init();
    }

    init() {
        try {
            this.cacheElements();
            this.attachEventListeners();
            this.validateQuestionsDatabase();
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error);
        }
    }

    cacheElements() {
        // –≠–∫—Ä–∞–Ω—ã
        this.welcomeScreen = this.getElement('welcome-screen');
        this.categoryInfoScreen = this.getElement('category-info-screen');
        this.quizScreen = this.getElement('quiz-screen');
        this.resultsScreen = this.getElement('results-screen');

        // –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.categoryInfoIcon = this.getElement('category-info-icon');
        this.categoryInfoTitle = this.getElement('category-info-title');
        this.categoryInfoDescription = this.getElement('category-info-description');
        this.categoryInfoQuestions = this.getElement('category-info-questions');
        this.categoryInfoAge = this.getElement('category-info-age');
        this.categoryInfoBack = this.getElement('category-info-back');
        this.categoryInfoStart = this.getElement('category-info-start');

        // –≠–ª–µ–º–µ–Ω—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        this.questionText = this.getElement('question-text');
        this.questionImageContainer = this.getElement('question-image-container');
        this.answersContainer = this.getElement('answers-container');
        this.currentQuestionSpan = this.getElement('current-question');
        this.totalQuestionsSpan = this.getElement('total-questions');
        this.progressFill = this.getElement('progress-fill');
        this.nextBtn = this.getElement('next-btn');
        this.backBtn = this.getElement('back-btn');

        // –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.resultsIcon = this.getElement('results-icon');
        this.resultsTitle = this.getElement('results-title');
        this.finalScoreSpan = this.getElement('final-score');
        this.correctCountSpan = this.getElement('correct-count');
        this.incorrectCountSpan = this.getElement('incorrect-count');
        this.resultsMessage = this.getElement('results-message');
        this.percentageSpan = this.getElement('percentage');
        this.resultsQuestionsList = this.getElement('results-questions-list');

        // –ö–Ω–æ–ø–∫–∏
        this.exitBtn = this.getElement('exit-btn');

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã—Ö–æ–¥–∞
        this.exitModal = this.getElement('exit-modal');
        this.exitConfirm = this.getElement('exit-confirm');
        this.exitCancel = this.getElement('exit-cancel');
    }

    getElement(id) {
        const element = document.getElementById(id);
        if (!element) {
            console.warn(`–≠–ª–µ–º–µ–Ω—Ç —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        return element;
    }

    validateQuestionsDatabase() {
        if (typeof questionsDatabase === 'undefined') {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }

        Object.keys(questionsDatabase).forEach(category => {
            const questions = questionsDatabase[category];
            if (!Array.isArray(questions)) {
                console.warn(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}" –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
                return;
            }

            questions.forEach((q, index) => {
                if (!q.question || !Array.isArray(q.answers) || typeof q.correct !== 'number') {
                    console.warn(`–í–æ–ø—Ä–æ—Å ${index + 1} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
                }
            });
        });
    }

    attachEventListeners() {
        if (this.exitBtn) {
            this.exitBtn.addEventListener('click', () => this.handleExitClick());
        }

        document.querySelectorAll('.category-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const category = e.currentTarget.dataset.category;
                if (category) {
                    this.showCategoryInfo(category);
                }
            });
        });

        if (this.categoryInfoBack) {
            this.categoryInfoBack.addEventListener('click', () => {
                this.showScreen(this.welcomeScreen);
            });
        }

        if (this.categoryInfoStart) {
            this.categoryInfoStart.addEventListener('click', () => {
                if (this.selectedCategory) {
                    this.startQuiz(this.selectedCategory);
                }
            });
        }

        if (this.backBtn) {
            this.backBtn.addEventListener('click', () => this.goBack());
        }

        if (this.nextBtn) {
            this.nextBtn.addEventListener('click', () => this.nextQuestion());
        }

        const playAgainBtn = this.getElement('play-again-btn');
        if (playAgainBtn) {
            playAgainBtn.addEventListener('click', () => {
                this.startQuiz(this.currentCategory);
            });
        }

        const changeCategoryBtn = this.getElement('change-category-btn');
        if (changeCategoryBtn) {
            changeCategoryBtn.addEventListener('click', () => {
                this.showScreen(this.welcomeScreen);
            });
        }

        if (this.exitConfirm) {
            this.exitConfirm.addEventListener('click', () => {
                this.returnToWelcomeScreen();
            });
        }

        if (this.exitCancel) {
            this.exitCancel.addEventListener('click', () => {
                this.hideExitModal();
            });
        }

        if (this.exitModal) {
            this.exitModal.addEventListener('click', (e) => {
                if (e.target === this.exitModal) {
                    this.hideExitModal();
                }
            });
        }
    }

    getCategoryData(category) {
        const categories = {
            cinema: {
                title: '–ö–∏–Ω–æ –Ω–∞ –±–æ—Ä—Ç—É',
                icon: 'üé¨',
                age: '12+',
                questions: 10,
                description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö –∏ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–µ. –í–æ–ø—Ä–æ—Å—ã –æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∞—Ö.'
            },
            literature: {
                title: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
                icon: 'üìö',
                age: '12+',
                questions: 10,
                description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º–∏—Ä–æ–≤–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –Ω–∞—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç—å!'
            },
            school: {
                title: '–®–∫–æ–ª–∞',
                icon: 'üè´',
                age: '6+',
                questions: 10,
                description: '–í–æ–ø—Ä–æ—Å—ã –∏–∑ —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º. –í—Å–ø–æ–º–Ω–∏—Ç–µ —à–∫–æ–ª—å–Ω—ã–µ –≥–æ–¥—ã!'
            },
            ecology: {
                title: '–≠–∫–æ–ª–æ–≥–∏—è',
                icon: 'üå±',
                age: '12+',
                questions: 10,
                description: '–û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞, –ø—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —ç–∫–æ-—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã?'
            },
            cartoons: {
                title: '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã',
                icon: 'üê≠',
                age: '6+',
                questions: 10,
                description: '–õ—é–±–∏–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ —Å—é–∂–µ—Ç—ã –∏–∑ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤. –û—Ç–ª–∏—á–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏!'
            },
            art: {
                title: '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
                icon: 'üé®',
                age: '12+',
                questions: 10,
                description: '–ñ–∏–≤–æ–ø–∏—Å—å, —Å–∫—É–ª—å–ø—Ç—É—Ä–∞ –∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –∏—Å–∫—É—Å—Å—Ç–≤–∞. –î–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ!'
            },
            geography: {
                title: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
                icon: 'üåç',
                age: '12+',
                questions: 10,
                description: '–ì–æ—Ä—ã, —Ä–µ–∫–∏, —Å—Ç–æ–ª–∏—Ü—ã –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –ø–ª–∞–Ω–µ—Ç–µ –ó–µ–º–ª—è!'
            },
            sport: {
                title: '–°–ø–æ—Ä—Ç',
                icon: '‚öΩ',
                age: '12+',
                questions: 10,
                description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã, –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –º–∞—Ç—á–∏ –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫—Ç–æ –∑–¥–µ—Å—å –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!'
            },
            music: {
                title: '–ú—É–∑—ã–∫–∞',
                icon: 'üéµ',
                age: '12+',
                questions: 10,
                description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ö–∏—Ç—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∏ –≤–µ–ª–∏–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã. –£–∑–Ω–∞–π—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–æ–≥–∞—Ç–∞ –≤–∞—à–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è!'
            },
            theater: {
                title: '–¢–µ–∞—Ç—Ä',
                icon: 'üé≠',
                age: '12+',
                questions: 10,
                description: '–í–µ–ª–∏–∫–∏–µ –ø—å–µ—Å—ã, –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–µ–∂–∏—Å—Å–µ—Ä—ã –∏ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏. –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∫ –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç–∞–º –∑–∞ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?'
            }
        };
        return categories[category] || null;
    }

    showCategoryInfo(category) {
        try {
            const categoryData = this.getCategoryData(category);

            if (!categoryData) {
                throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }

            this.safeSetText(this.categoryInfoIcon, categoryData.icon);
            this.safeSetText(this.categoryInfoTitle, categoryData.title);
            this.safeSetText(this.categoryInfoDescription, categoryData.description);
            this.safeSetText(this.categoryInfoQuestions, categoryData.questions);
            this.safeSetText(this.categoryInfoAge, categoryData.age);

            this.selectedCategory = category;
            this.showScreen(this.categoryInfoScreen);
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', error);
        }
    }

    handleExitClick() {
        if (this.welcomeScreen && this.welcomeScreen.classList.contains('active')) {
            this.exitToPortal();
        } else {
            this.showExitModal();
        }
    }

    showExitModal() {
        if (this.exitModal) {
            this.exitModal.classList.add('active');
        }
    }

    hideExitModal() {
        if (this.exitModal) {
            this.exitModal.classList.remove('active');
        }
    }

    returnToWelcomeScreen() {
        this.hideExitModal();
        this.showScreen(this.welcomeScreen);
        this.resetQuiz();
    }

    exitToPortal() {
        window.location.href = this.portalUrl;
    }

    resetQuiz() {
        this.currentCategory = null;
        this.questions = [];
        this.currentQuestionIndex = 0;
        this.score = 0;
        this.correctAnswers = 0;
        this.questionHistory = [];
        this.selectedAnswers = {};
        this.confirmedAnswers = new Set();
    }

    startQuiz(category) {
        try {
            if (!questionsDatabase[category]) {
                throw new Error(`–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }

            this.currentCategory = category;
            this.questions = [...questionsDatabase[category]];
            this.currentQuestionIndex = 0;
            this.score = 0;
            this.correctAnswers = 0;
            this.questionHistory = [];
            this.selectedAnswers = {};
            this.confirmedAnswers = new Set();

            this.safeSetText(this.totalQuestionsSpan, this.questions.length);

            this.showScreen(this.quizScreen);
            this.loadQuestion();
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã', error);
        }
    }

    loadQuestion() {
        try {
            const question = this.questions[this.currentQuestionIndex];

            if (!question) {
                throw new Error('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            this.safeSetText(this.currentQuestionSpan, this.currentQuestionIndex + 1);
            const progress = ((this.currentQuestionIndex + 1) / this.questions.length) * 100;
            if (this.progressFill) {
                this.progressFill.style.width = progress + '%';
                this.progressFill.parentElement.setAttribute('aria-valuenow', Math.round(progress));
            }

            this.loadQuestionImage(question.image);
            this.safeSetText(this.questionText, question.question);
            this.createAnswerButtons(question.answers);

            const savedAnswer = this.selectedAnswers[this.currentQuestionIndex];
            const isConfirmed = this.confirmedAnswers.has(this.currentQuestionIndex);

            if (savedAnswer !== undefined) {
                this.restoreAnswerState(savedAnswer, isConfirmed);
            } else {
                this.disableNextButton();
            }

            this.updateBackButton();
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞', error);
        }
    }

    loadQuestionImage(imagePath) {
        if (!this.questionImageContainer) return;

        this.questionImageContainer.innerHTML = '';

        if (imagePath) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å placeholder
            const imageWrapper = document.createElement('div');
            imageWrapper.className = 'question-image-wrapper';

            // Placeholder
            const placeholder = document.createElement('div');
            placeholder.className = 'question-image-placeholder';
            placeholder.innerHTML = '<div class="placeholder-spinner"></div>';

            // –°–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const img = document.createElement('img');
            img.className = 'question-image';
            img.alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞';
            img.loading = 'lazy';
            img.style.opacity = '0';

            img.onload = () => {
                // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                setTimeout(() => {
                    img.style.opacity = '1';
                    placeholder.style.opacity = '0';
                    setTimeout(() => {
                        placeholder.remove();
                    }, 300);
                }, 100);
            };

            img.onerror = () => {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`);
                placeholder.innerHTML = '<div class="placeholder-error">üì∑</div>';
            };

            imageWrapper.appendChild(placeholder);
            imageWrapper.appendChild(img);
            this.questionImageContainer.appendChild(imageWrapper);

            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            img.src = imagePath;
        }
    }

    createAnswerButtons(answers) {
        if (!this.answersContainer) return;

        this.answersContainer.innerHTML = '';

        if (!Array.isArray(answers)) {
            console.warn('–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
            return;
        }

        answers.forEach((answer, index) => {
            const button = document.createElement('button');
            button.className = 'answer-btn';
            button.dataset.index = index;
            button.setAttribute('role', 'button');
            button.setAttribute('aria-label', `–û—Ç–≤–µ—Ç ${index + 1}`);

            button.textContent = this.sanitizeText(answer);

            button.addEventListener('click', () => this.selectAnswer(index));
            this.answersContainer.appendChild(button);
        });
    }

    restoreAnswerState(selectedIndex, isConfirmed) {
        try {
            const answerButtons = this.answersContainer.querySelectorAll('.answer-btn');

            answerButtons.forEach(btn => {
                btn.classList.remove('selected');
                if (isConfirmed) {
                    btn.classList.add('disabled');
                } else {
                    btn.classList.remove('disabled');
                }
            });

            if (selectedIndex !== undefined) {
                answerButtons[selectedIndex].classList.add('selected');
            }

            this.enableNextButton();
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞', error);
        }
    }

    selectAnswer(selectedIndex) {
        try {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–∞–ª–µ–µ"), –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å
            if (this.confirmedAnswers.has(this.currentQuestionIndex)) {
                return;
            }

            const answerButtons = this.answersContainer.querySelectorAll('.answer-btn');

            this.selectedAnswers[this.currentQuestionIndex] = selectedIndex;

            answerButtons.forEach(btn => {
                btn.classList.remove('selected');
            });

            answerButtons[selectedIndex].classList.add('selected');

            setTimeout(() => {
                this.enableNextButton();
            }, 300);

        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞', error);
        }
    }

    nextQuestion() {
        try {
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            this.confirmedAnswers.add(this.currentQuestionIndex);

            this.questionHistory.push(this.currentQuestionIndex);
            this.currentQuestionIndex++;

            if (this.currentQuestionIndex < this.questions.length) {
                this.loadQuestion();
            } else {
                this.showResults();
            }
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É', error);
        }
    }

    goBack() {
        if (this.questionHistory.length > 0) {
            this.currentQuestionIndex = this.questionHistory.pop();
            this.loadQuestion();
        } else {
            this.showExitModal();
        }
    }

    updateBackButton() {
        if (!this.backBtn) return;

        if (this.questionHistory.length === 0) {
            this.backBtn.style.opacity = '0.5';
        } else {
            this.backBtn.style.opacity = '1';
        }
    }

    enableNextButton() {
        if (!this.nextBtn) return;

        this.nextBtn.classList.add('active');
        this.nextBtn.disabled = false;
    }

    disableNextButton() {
        if (!this.nextBtn) return;

        this.nextBtn.classList.remove('active');
        this.nextBtn.disabled = true;
    }

    showResults() {
        try {
            this.correctAnswers = 0;
            this.score = 0;

            this.questions.forEach((question, index) => {
                const userAnswer = this.selectedAnswers[index];
                if (userAnswer === question.correct) {
                    this.correctAnswers++;
                    this.score += 10;
                }
            });

            const percentage = Math.round((this.correctAnswers / this.questions.length) * 100);
            const incorrectAnswers = this.questions.length - this.correctAnswers;

            this.safeSetText(this.finalScoreSpan, this.score);
            this.safeSetText(this.correctCountSpan, this.correctAnswers);
            this.safeSetText(this.incorrectCountSpan, incorrectAnswers);
            this.safeSetText(this.percentageSpan, percentage + '%');

            this.setResultsContent(percentage);
            this.createQuestionsList();

            this.showScreen(this.resultsScreen);
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', error);
        }
    }

    setResultsContent(percentage) {
        let icon, title, message;

        if (percentage >= 90) {
            icon = 'üèÜ';
            title = '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!';
            message = '–í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç! –§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í–∞—à–∏ –∑–Ω–∞–Ω–∏—è –≤–ø–µ—á–∞—Ç–ª—è—é—Ç!';
        } else if (percentage >= 70) {
            icon = 'üåü';
            title = '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!';
            message = '–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!';
        } else if (percentage >= 50) {
            icon = 'üëç';
            title = '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
            message = '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –£ –í–∞—Å –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º!';
        } else {
            icon = 'üí™';
            title = '–ï—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!';
            message = '–ö–∞–∂–¥–∞—è –í–∞—à–∞ –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π –æ–ø—ã—Ç. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å –Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º ‚Äî –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë —Å—Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–π!';
        }

        this.safeSetText(this.resultsIcon, icon);
        this.safeSetText(this.resultsTitle, title);
        this.safeSetText(this.resultsMessage, message);
    }

    createQuestionsList() {
        if (!this.resultsQuestionsList) return;

        this.resultsQuestionsList.innerHTML = '';

        this.questions.forEach((question, index) => {
            const userAnswer = this.selectedAnswers[index];
            const isCorrect = userAnswer === question.correct;
            const userAnswerText = userAnswer !== undefined ? question.answers[userAnswer] : '–ù–µ –æ—Ç–≤–µ—Ç–∏–ª';
            const correctAnswerText = question.answers[question.correct];

            const questionItem = document.createElement('div');
            questionItem.className = `results-question-item ${isCorrect ? 'correct' : 'incorrect'}`;

            // –®–∞–ø–∫–∞: –Ω–æ–º–µ—Ä + —Å—Ç–∞—Ç—É—Å
            const questionHeader = document.createElement('div');
            questionHeader.className = 'question-header';
            questionHeader.innerHTML = `
                <span class="question-number">–í–æ–ø—Ä–æ—Å ${index + 1}</span>
                <span class="question-status ${isCorrect ? 'correct' : 'incorrect'}">
                    ${isCorrect ? '‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
                </span>
            `;

            // –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            const questionTextDiv = document.createElement('div');
            questionTextDiv.className = 'question-text';
            questionTextDiv.textContent = this.sanitizeText(question.question);

            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤
            const answersContainer = document.createElement('div');
            answersContainer.className = 'answers-container';

            // –í–∞—à –æ—Ç–≤–µ—Ç
            const userAnswerDiv = document.createElement('div');
            userAnswerDiv.className = 'answer-row user-answer';
            userAnswerDiv.innerHTML = `
                <span class="answer-label">–í–∞—à –æ—Ç–≤–µ—Ç:</span>
                <span class="answer-value">${this.sanitizeText(userAnswerText)}</span>
            `;
            answersContainer.appendChild(userAnswerDiv);

            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if (!isCorrect) {
                const correctAnswerDiv = document.createElement('div');
                correctAnswerDiv.className = 'answer-row correct-answer';
                correctAnswerDiv.innerHTML = `
                    <span class="answer-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</span>
                    <span class="answer-value">${this.sanitizeText(correctAnswerText)}</span>
                `;
                answersContainer.appendChild(correctAnswerDiv);
            }

            // –ü–æ—è—Å–Ω–µ–Ω–∏–µ
            if (question.explanation) {
                const explanationDiv = document.createElement('div');
                explanationDiv.className = 'explanation-row';
                explanationDiv.innerHTML = `
                    <span class="explanation-icon">üí°</span>
                    <span class="explanation-text">${this.sanitizeText(question.explanation)}</span>
                `;
                answersContainer.appendChild(explanationDiv);
            }

            questionItem.appendChild(questionHeader);
            questionItem.appendChild(questionTextDiv);
            questionItem.appendChild(answersContainer);

            this.resultsQuestionsList.appendChild(questionItem);
        });
    }

    showScreen(screen) {
        if (!screen) return;

        try {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            screen.classList.add('active');

            window.scrollTo({ top: 0, behavior: 'smooth' });
        } catch (error) {
            this.handleError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞', error);
        }
    }

    safeSetText(element, text) {
        if (!element) return;
        element.textContent = String(text);
    }

    sanitizeText(text) {
        if (typeof text !== 'string') return '';
        return text.replace(/[<>]/g, '');
    }

    handleError(message, error) {
        console.error(message, error);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    try {
        new QuizApp();
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
});